{"name":"Type1","body":"# 型付きコンパイラを作ろう\r\n\r\n## 1. はじめに\r\n\r\nコンパイラの作成は、昔は、１パスの高速なコンパイラが主流でした。\r\nしかし、現在では、関数型言語のパターンマッチを用いたコンパイラ作りが主流となりつつあります。\r\nそこで、関数型言語の機能を持ったScalaを使ってコンパイラを作ります。\r\nワンパスなコンパイラに比べると重い作りになっていますが、\r\n複数パスで作る事で分かりやすく最適化も考慮に入れた作りとなっています。\r\n前回作った言語はint型しかサポートしていませんでした。\r\n今回は char, short, int, long, float, double の複数の型を持った言語を作成します。\r\nまだ、配列や構造体がないので実用言語とは言えないかも知れませんが、\r\n暗黙の型変換、型推論、型付きのコンパイラ作成を学ぶ事が出来ます。\r\n\r\n\r\nこの文書はmarkdownで記述しました。chromeのアプリケーションを使う事で、\r\nリアルタイムに表示しながら気軽に記述することが出来ました。\r\n\r\n## 2. アセンブラを複数の型に対応する\r\n\r\n### 2.0. サイズ\r\n\r\n### 2.1. 足し算\r\n\r\n  // test_type.c\r\n\t\r\n\tchar char_add(char a, char b) {\r\n\t\tchar r = a + b;\r\n\t\treturn r;\r\n\t}\r\n\r\n\r\n以上のような関数を作って\r\n\r\n\tgcc -S test_add.c \r\n\r\nとしてコンパイルし、整形してみます。\r\n\r\n\t; test_add.S\r\n\tmovb\r\n\tmovb\r\n\r\n### 2.2. 引き算\r\n### 2.3. かけ算\r\n### 2.4. 割り算\r\n### 2.5. 余り\r\n### 2.6. キャスト\r\n### 2.7. 即値\r\n\r\nそろそろテストをしたいのですが、現状の機能ではテストが出来ません。\r\nテストをするには、即値をコンパイルできないといけません。\r\nまた、結果を出力出来ると良いです。\r\n\r\nそこで、2.7では即値のコンパイルを 2.8ではprintを出来るようにします。\r\n\r\n\r\n### 2.7. print\r\nそこから、計算して、表示する。\r\n\r\n### 2.8. テスト\r\n\r\nさて、ずいぶん沢山実装したので、間違いがあるかも知れません。\r\nそこで、しっかりとテストをしましょう。\r\n\r\n\r\n#### 問題\r\n\r\n##### 型をどう持つか？\r\n\r\nどうしよう？\r\n\r\n##### キャストをどう表現するか？\r\n\r\nこまるよなぁ\r\n\r\n* TyCon(\"cast\",List(TyCon(\"Char\",List()), TyCon(\"Short\",List()))\r\n* Cast(Char(3),TShort())\r\n\r\n例えば、こんな感じ\r\n\r\n\r\n#### プリミティブな型のキャスト\r\n\r\n* Char2Short\r\n* Char2Int\r\n* Char2Long\r\n* Char2Float\r\n* Char2Double\r\n\r\n* Short2Char\r\n* Short2Int\r\n* Short2Long\r\n* Short2Float\r\n* Short2Double\r\n\r\n* Int2Char\r\n* Int2Short\r\n* Int2Long\r\n* Int2Float\r\n* Int2Double\r\n\r\n* Long2Char\r\n* Long2Short\r\n* Long2Int\r\n* Long2Float\r\n* Long2Double\r\n\r\n* Float2Char\r\n* Float2Short\r\n* Float2Int\r\n* Float2Long\r\n* Float2Double\r\n\r\n* Double2Char\r\n* Double2Short\r\n* Double2Int\r\n* Double2Long\r\n* Double2Float\r\n\r\n\r\nそうすると、以上のコードが得られます。\r\nこのようにして、コンパイラ結果を取得して、Scalaのコードに落として行きます。\r\n\r\n## 3. 暗黙の型変換\r\n\r\nimplicitでどうするってはなし。\r\n\r\n\r\n\r\n## 3. 構文木を複数の型に対応する\r\n\r\n\r\n## 4. 型推論\r\n\r\n型推論の話は長くなるけどまぁ、しかたない。書く。\r\n\r\n","tagline":"typing compiler","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}